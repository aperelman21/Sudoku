
package sudoku;

import javax.swing.JOptionPane;

/**
 * Esta clase crea la interfaz grafica (GUI) para la aplicacion del sudoku. De igual manera, tiene los métodos necesarios para resolver el sudoku.
 * @author Alexander Perelman
 * @author Axel Flores
 * @author Santiago Liceaga
 * @author Pablo Landa
 * @author Mario Marin
 */
public class InterfazSudoku extends javax.swing.JFrame {

    /**
     * Creates new form InterfazSudoku
     */
    private int[][] sudoku;
    private static final int VACIO = 0;
    public InterfazSudoku() {
        initComponents();
        sudoku = new int[9][9];
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 102, 102));
        setMaximumSize(new java.awt.Dimension(350, 430));

        jTable1.setBackground(new java.awt.Color(255, 255, 255));
        jTable1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 0), null));
        jTable1.setForeground(new java.awt.Color(0, 0, 0));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0)},
                { new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0)},
                { new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0)},
                { new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0)},
                { new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0)},
                { new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0)},
                { new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0)},
                { new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0)},
                { new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0)}
            },
            new String [] {
                "", "", "", "", "", "", "", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setAutoscrolls(false);
        jTable1.setGridColor(new java.awt.Color(0, 0, 0));
        jTable1.setRowHeight(32);
        jTable1.setShowGrid(true);
        jTable1.setSize(new java.awt.Dimension(371, 100));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Resuelve");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Limpia");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Silom", 1, 36)); // NOI18N
        jLabel1.setText("SUDOKU");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(66, 66, 66))
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /**
     * Revisa si el valor dado ya está contenido en el renglon.
     * @param ren renglon donde se encuentra el valor.
     * @param n valor que se quiere analizar.
     * @return 
     * <ul>
     * <li> true: si el valor ya está contenido en el renglon.
     * <li> false: si el valor no está contenido en el renglon.
     * </ul>
     */
    public boolean contieneEnRenglon(int ren, int n){
        ConjADT<Integer> conj = new ConjuntoA();
        for(int i = 0; i<9; i++)
            if(sudoku[ren][i]!=VACIO)
                conj.agregaElemento(sudoku[ren][i]);
        return conj.contiene(n);
    }
    /**
     * Revisa si el valor dado ya está contenido en la columna.
     * @param col columna donde se encuentra el valor.
     * @param n valor que se quiere analizar.
     * @return 
     * <ul>
     * <li> true: si el valor ya está contenido en la columna.
     * <li> false: si el valor no está contenido en la columna.
     * </ul>
     */
    public boolean contieneEnColumna(int col, int n){
        ConjADT<Integer> conj = new ConjuntoA();
        for(int i = 0; i<9; i++)
            if(sudoku[i][col]!=VACIO)
                conj.agregaElemento(sudoku[i][col]);
        return conj.contiene(n);
    }
    
    /**
     * Revisa si el valor dado está contenido en el cuadrado de 3x3 correspondiente.
     * @param ren renglon donde se encunetra el valor.
     * @param col columna donde se encuentra el valor.
     * @param n valor que se quiere analizar.
     * @return 
     * <ul>
     * <li> true: si el valor ya está contenido.
     * <li> false: si el valor no está contenido.
     * </ul>
     */
    public boolean contieneEnCuadrado(int ren, int col, int n){
        ConjADT<Integer> conj = new ConjuntoA();
        int colInic = col - col%3;
        int renInic = ren - ren%3;
        for(int i=renInic;i<renInic+3;i++)
            for(int j=colInic;j<colInic+3;j++)
                if(sudoku[i][j]!=VACIO)
                    conj.agregaElemento(sudoku[i][j]);
        return conj.contiene(n);            
    }
    
    /**
     * Revisa si el valor dado se puede poner sin repetirlo en la columna, renglon y cuadrado correspondientes.
     * @param ren renglon donde se encunetra el valor.
     * @param col columna donde se encuentra el valor.
     * @param n valor que se quiere analizar.
     * @return 
     * <ul>
     * <li> true: si el valor se puede poner sin repetir.
     * <li> false: si el valor no se puede poner.
     * </ul>
     */
    public boolean esValorPosible(int ren, int col, int n){
        return !(contieneEnRenglon(ren,n)||contieneEnColumna(col,n)||contieneEnCuadrado(ren,col,n));
    }
    
    /**
     * Metodo que analiza si la matriz que ingreso el usuario es valida
     * @return 
     * <ul>
     * <li> true: si la matriz es valida.
     * <li> false: si la matriz no es valida.
     * </ul>
     */
    public boolean revisaMatrizInicial(){
       boolean resp;
       resp = true;
       int i,j,valor;
       i=0;
       while(resp && i<9){
           j=0;
           while(j<9){
               valor = sudoku[i][j];
               if(valor>9||valor<0)
                   resp = false;
               sudoku[i][j] = VACIO;
               if(!esValorPosible(i,j,valor))
                   resp = false;
               sudoku[i][j] = valor;
               j++;
           }
           
           i++;
       }
       return resp;  
    }

    /**
     * Método que resuelve la matriz ingresada por el usuario.
     * El método es recursivo y esta sobrecargado.
     * 
     * @return 
     *  <ul>
     * <li> true: si se pudo resolver el sudoku
     * <li> false: si no se pudo.
     * </ul>
     */
    public boolean resuelve(){
        if(!revisaMatrizInicial())
            return false;
        else
            return resuelve(0,0);
    }
    
    private boolean resuelve(int ren, int col){
        
        if(col == 9){
            col = 0;
            ren++;
        if(ren==9)
            return true;
        }
        if(sudoku[ren][col] != VACIO)
            return resuelve(ren,col+1);
        
        for(int n = 1; n<=9;n++){
            if(esValorPosible(ren,col,n)){
                sudoku[ren][col]=n;
                if(resuelve(ren,col+1))
                    return true;
                sudoku[ren][col] = VACIO; 
            }
               
        }
        return false;
      
    }
    /**
     * Agrega funcionalidad al botón "resuelve" para que cuando se presione, 
     * se resuelva el sudoku ingresado por el usuario.
     * @param evt 
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        boolean resp;
        for(int i=0;i<9;i++)
            for(int j= 0; j<9;j++)
                sudoku[i][j] = (int) jTable1.getValueAt(i,j);
        resp = resuelve();
        for(int i=0;i<9;i++)
            for(int j= 0; j<9;j++)
                jTable1.setValueAt(sudoku[i][j], i, j);
        if(resp)
            JOptionPane.showMessageDialog(rootPane,"sudoku resuelto");
        else
            JOptionPane.showMessageDialog(rootPane,"sudoku no se puede resolver");
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * Agrega funcionalidad al botón "limpia" para vaciar el arreglo.
     * @param evt 
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        for(int i=0;i<9;i++)
            for(int j= 0; j<9;j++)
                jTable1.setValueAt(0, i,j);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazSudoku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazSudoku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazSudoku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazSudoku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazSudoku().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
